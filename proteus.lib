: CpuBaseAddr 0x10000 ; INLINE

: CELLS // value -- value*cellsize
 1 *
; INLINE

: -TH // addr, index -- addr+index*cellsize
 CELLS +
; INLINE

: -1 0 NOT ; INLINE
: NEGATE 0 SWAP - ; INLINE

: 0< 0x80000000 AND NOT NOT ;
: 0> NEGATE 0< ;

: ABS \ ( x -- u )
 DUP 0< IF
  NEGATE
 THEN
;

: 34NOPS    // 34 nops
  NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP
  NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP
  NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP
  NOP NOP NOP NOP
;

: SETDIVALOW  CpuBaseAddr     OUTPORT ; INLINE
: SETDIVAHIGH CpuBaseAddr 1 + OUTPORT ; INLINE
: SETDIVB     CpuBaseAddr 2 + OUTPORT ; INLINE
: STARTDIVIDE 0 CpuBaseAddr 3 + OUTPORT ; INLINE
: DIVASHRA    0 CpuBaseAddr 4 + OUTPORT ; INLINE
: DIVASHR     0 CpuBaseAddr 5 + OUTPORT ; INLINE
: DIVASHL     0 CpuBaseAddr 6 + OUTPORT ; INLINE
: TIMERTODIVA 0 CpuBaseAddr 7 + OUTPORT ; INLINE

: COMINIT 0 CpuBaseAddr 16 + OUTPORT ; INLINE
: TestGetByte 0 CpuBaseAddr 17 + OUTPORT ; INLINE

VARIABLE DividerSign
: DEPTH         0 SYSREG@ ; INLINE
: RDEPTH        1 SYSREG@ ; INLINE
: I             2 SYSREG@ ; INLINE
: / // a, b --> a/b
  OVER 0< OVER 0< XOR SHL 1 + DividerSign ! ABS SWAP ABS SWAP
  SETDIVB // b (63..32)
  SETDIVALOW // a (31..0)
  0 SETDIVAHIGH // a (63..32)
  STARTDIVIDE // start
  34NOPS 3 SYSREG@ DividerSign @ *
;
: MOD    / DROP 4 SYSREG@ ; INLINE
: /MOD   /      4 SYSREG@ ; INLINE
: COMREADYFORTX 5 SYSREG@ ; INLINE
: COMRECEIVED   6 SYSREG@ ; INLINE
: COMNEWDATA    7 SYSREG@ ; INLINE
: SYSTIMER_LOW  8 SYSREG@ ; INLINE
: SYSTIMER_HI   9 SYSREG@ ; INLINE
: USEC         10 SYSREG@ ; INLINE
: MSEC         11 SYSREG@ ; INLINE
: SEC          12 SYSREG@ ; INLINE
: MIN          13 SYSREG@ ; INLINE
: HOUR         14 SYSREG@ ; INLINE
: MULT64       15 SYSREG@ ; INLINE
: DIVALOW      16 SYSREG@ ; INLINE
: DIVAHIGH     17 SYSREG@ ; INLINE
: RXCOUNTER    18 SYSREG@ ; INLINE
: TXCOUNTER    19 SYSREG@ ; INLINE
: USCOUNTER    20 SYSREG@ ; INLINE

: << // x n --> (x shl n)
 DUP IF 0 DO
  SHL
 LOOP ELSE DROP THEN
 NOP
;

: >> // x n --> (x shr n)
 DUP IF 0 DO
  SHR
 LOOP ELSE DROP THEN
 NOP
;


: >>A // x n --> (x shr n)
 DUP IF 0 DO
  SHRA
 LOOP ELSE DROP THEN
 NOP
;

: ->COM
 BEGIN COMREADYFORTX UNTIL
 -1 OUTPORT
;

: ->COM16
                  DUP ->COM
  8 0 DO SHR LOOP     ->COM
;

: ->COM32
                  DUP ->COM
  8 0 DO SHR LOOP DUP ->COM
  8 0 DO SHR LOOP DUP ->COM
  8 0 DO SHR LOOP     ->COM
;

VARIABLE COMDATA
: CHECKCOM COMNEWDATA ; INLINE
: GETCOMDATA COMRECEIVED COMDATA ! ; INLINE
{ COMINIT }

VARIABLE n1
VARIABLE n10
VARIABLE n100
VARIABLE n1000
VARIABLE n10000
VARIABLE n100000
VARIABLE n1000000
VARIABLE n10000000
VARIABLE n100000000
VARIABLE n1000000000
{
 1          n1          !
 10         n10         !
 100        n100        !
 1000       n1000       !
 10000      n10000      !
 100000     n100000     !
 1000000    n1000000    !
 10000000   n10000000   !
 100000000  n100000000  !
 1000000000 n1000000000 !
}

ARRAY strbuf 16
VARIABLE CurConst
VARIABLE cur
: IntToStr \ n --> addr
 DUP 0< IF -1 XOR 1 + 45 ELSE 43 THEN strbuf !
 1 cur !
 10 0 DO
  n1000000000 I - @ CurConst !
  -1 SWAP
  BEGIN
   SWAP 1 + SWAP
   CurConst @ - DUP 0< IF CurConst @ + 1 ELSE 0 THEN
  UNTIL
  SWAP
  DUP 0 = NOT cur @ 1 > OR IF
   48 + strbuf cur @ + !
   cur @ 1 + cur !
  ELSE
   DROP
  THEN
 LOOP
 DROP
 cur @ 1 = IF
  48 strbuf 1 + !
  cur @ 1 + cur !
 THEN
 0 strbuf cur @ + !
 strbuf
 strbuf @ 43 = IF 1 ELSE 0 THEN +
;

VARIABLE sign
VARIABLE num
: StrToInt // addr --> number
 0 sign !
 DUP @ 43 = IF 0 sign ! 1 + THEN
 DUP @ 45 = IF 1 sign ! 1 + THEN
 0 num !
 BEGIN
  DUP @ // addr char
  DUP 0 = IF // end of string
   DROP DROP
   num @ sign @ IF 0 SWAP - THEN
   EXIT
  THEN
  DUP 0x2E = IF
   DROP // skip '.'
  ELSE
   48 - num @ 10 * + num !
  THEN
  1 +
 AGAIN
;

: StrCmp
 1 - SWAP 1 - SWAP
 BEGIN
  1 + SWAP 1 + SWAP
  OVER @ OVER @
  OVER OVER = NOT >R
  NOT SWAP NOT OR
  R> OR
 UNTIL
 @ SWAP @ =
;

: STR->COM
 BEGIN
  DUP @ ->COM
  1 +
  DUP @ NOT IF DROP EXIT THEN
 AGAIN
;

: INT->COM
 IntToStr STR->COM
;

: BYTE->COM
  8 0 DO
    DUP
    7 I - >> 1 AND IF 49 ELSE 48 THEN ->COM
  LOOP
  DROP
;

: CR_COM 13 ->COM 10 ->COM ; INLINE
: TAB_COM 9 ->COM ; INLINE

: PRINT \ str-addr -->
 BEGIN
  DUP @
 WHILE
  DUP @ ->COM
  1 +
 REPEAT
 DROP
;

: HEXDIGIT
 0xF AND DUP 9 > IF 55 ELSE 48 THEN + ->COM
;

: HEX->COM
 DUP SHR SHR SHR SHR HEXDIGIT
 HEXDIGIT
;

: HEX16->COM
 DUP 8 0 DO SHR LOOP HEX->COM
 HEX->COM
;

: HEX32->COM
 DUP 16 0 DO SHR LOOP HEX16->COM
 HEX16->COM
;

: BINX->COM // num N --
 1 OVER 1 - <<
 SWAP 0 DO
  OVER OVER AND IF 49 ELSE 48 THEN ->COM
  SHR
  I 7 AND 7 = IF 32 ->COM THEN
 LOOP
 DROP DROP
;

: BIN->COM 8 BINX->COM ; INLINE
: BIN16->COM 16 BINX->COM ; INLINE
: BIN32->COM 32 BINX->COM ; INLINE

VARIABLE RND

: RANDOMIZE SYSTIMER_LOW RND ! ;
{ RANDOMIZE }

: RANDOM \  ( -- u )
RND @ 69069 * 31415 + 278720333 MOD DUP RND !
;

: CHOOSE  \ ( u1 -- u2 )
   278720333 SWAP /
   RANDOM ABS SWAP /
;

VARIABLE 'J
: J 'J @ ; INLINE
: J! 'J ! ; INLINE

: SMOVE // src dest -->
 BEGIN
  OVER @ OVER !
  OVER @ 0 = IF DROP DROP EXIT THEN
  SWAP 1 + SWAP 1 +
 AGAIN
;

: S> // a b --> a>b
  SWAP - 0<
;
: S< // a b --> a<b
 - 0<
;

: ByteReverse // 0x12345678 -- 0x78563412
 DUP  0x000000FF AND 24 <<
 OVER 0x0000FF00 AND  8 << +
 OVER 0x00FF0000 AND  8 >> +
 SWAP 0xFF000000 AND 24 >> +
;

: OFF // addr --
 0 SWAP !
;

: ON // addr --
 -1 SWAP !
;

VARIABLE MemoryFunction.Source
VARIABLE MemoryFunction.Dest
VARIABLE MemoryFunction.Result
: CopyMemory // length source dest --
 MemoryFunction.Dest ! MemoryFunction.Source !
 DUP IF
  MemoryFunction.Source @ MemoryFunction.Dest @ < IF
   MemoryFunction.Source @ OVER + 1 - SWAP
   MemoryFunction.Dest @ OVER + 1 - SWAP
   // source+length-1 dest+length-1
   0 DO
    OVER @ OVER !
    1 - SWAP 1 - SWAP
   LOOP
   DROP DROP
  ELSE
   MemoryFunction.Source @ SWAP MemoryFunction.Dest @ SWAP
   0 DO
    // source dest
    OVER @ OVER !
    1 + SWAP 1 + SWAP
   LOOP
   DROP DROP
  THEN
 ELSE
  DROP
 THEN
;

: CompareMemory // length source1 source2 -- boolean
 -1 MemoryFunction.Result !
 MemoryFunction.Source !
 SWAP DUP IF
  MemoryFunction.Source @ SWAP
  0 DO
   OVER @ OVER @ = MemoryFunction.Result @ AND MemoryFunction.Result !
   1 + SWAP 1 + SWAP
  LOOP
  DROP DROP
  MemoryFunction.Result @
 ELSE
  DROP DROP -1
 THEN
;

VARIABLE WriteAddr
: Write, // length source --
 OVER OVER WriteAddr @ CopyMemory
 DROP WriteAddr @ + WriteAddr !
;

: WriteByte, // byte --
 WriteAddr @ !
 WriteAddr @ 1 + WriteAddr !
;

: WriteWordBE, // word --
 DUP 8 >> 0xFF AND WriteByte, 0xFF AND WriteByte,
;

: WriteIntBE, // int --
 DUP 16 >> 0xFFFF AND WriteWordBE, 0xFFFF AND WriteWordBE,
;

: WriteWordLE, // word --
 DUP 0xFF AND WriteByte, 8 >> 0xFF AND WriteByte,
;

: WriteIntLE, // int --
 DUP 0xFFFF AND WriteWordLE, 16 >> 0xFFFF AND WriteWordLE,
;

: LECombine // length addr -- value
 SWAP DUP IF
  0 SWAP
  // addr value length
  0 DO
   OVER @ I 8 * << +
   SWAP 1 + SWAP
  LOOP
  SWAP DROP
 ELSE
  DROP DROP 0
 THEN
;

: BECombine // length addr -- value
 SWAP DUP IF
  0 SWAP
  // addr value length
  0 DO
   8 <<
   OVER @ +
   SWAP 1 + SWAP
  LOOP
  SWAP DROP
 ELSE
  DROP DROP 0
 THEN
;

