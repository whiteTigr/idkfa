// for Proteus compiler
                 // Запись программы
#COM 1           // по нужному COM-порту
#BAUDRATE 115200 // с нужной скоростью
#PACKSIZE= 1     // пакетами по PACKSIZE байт
#WAITCOEF= 2     // с задержкой, вычисляемой по формуле
                 // (PackSize * 8 / BaudRate) * WaitCoef секунд
// Если программа не зашивается, попробуйте уменьшить размер пакетов
// и увеличить задержку

#MaxCode= 65536
#MaxData= 65536

STRUCT TA
  1 -- a
  1 -- b
END-STRUCT
: TA@.Size 2 ; INLINE

STRUCT TB
  1 -- a
  1 -- b
  TA -- c
  TA -- d
END-STRUCT
: TB@.Size 6 ; INLINE


TB* test
VARIABLE ptest
: sizeof(test) 6 ; INLINE
: test.size() 6 ; INLINE
: test.Size() 6 ; INLINE
: test ptest @ ; INLINE
: test.a ptest @ 0 + ; INLINE
: test.b ptest @ 1 + ; INLINE
: test.c ptest @ 2 + ; INLINE
: test.c.a ptest @ 2 + ; INLINE
: test.c.b ptest @ 3 + ; INLINE
: test.d ptest @ 4 + ; INLINE
: test.d.a ptest @ 4 + ; INLINE
: test.d.b ptest @ 5 + ; INLINE

TB test2
CREATE test2[] 6 ALLOT
: sizeof(test2) 6 ; INLINE
: test2.size() 6 ; INLINE
: test2.Size() 6 ; INLINE
: test2 3 ; INLINE
: test2.a 3 ; INLINE
: test2.b 4 ; INLINE
: test2.c 5 ; INLINE
: test2.c.a 5 ; INLINE
: test2.c.b 6 ; INLINE
: test2.d 7 ; INLINE
: test2.d.a 7 ; INLINE
: test2.d.b 8 ; INLINE

TB@ test3
VARIABLE ptest3
: sizeof(test3) 6 ; INLINE
: test3.size() 6 ; INLINE
: test3.Size() 6 ; INLINE
: test3 ptest3 @ ; INLINE
: test3.a ptest3 @ 0 + @ ; INLINE
: test3.b ptest3 @ 1 + @ ; INLINE
: test3.c ptest3 @ 2 +  ; INLINE
: test3.c.a ptest3 @ 2 + @ ; INLINE
: test3.c.b ptest3 @ 3 + @ ; INLINE
: test3.d ptest3 @ 4 +  ; INLINE
: test3.d.a ptest3 @ 4 + @ ; INLINE
: test3.d.b ptest3 @ 5 + @ ; INLINE
TA@ test4
VARIABLE ptest4
: sizeof(test4) 2 ; INLINE
: test4.size() 2 ; INLINE
: test4.Size() 2 ; INLINE
: test4 ptest4 @ ; INLINE
: test4.a ptest4 @ 0 + @ ; INLINE
: test4.b ptest4 @ 1 + @ ; INLINE

TB data
CREATE data[] 6 ALLOT
: sizeof(data) 6 ; INLINE
: data.size() 6 ; INLINE
: data.Size() 6 ; INLINE
: data 11 ; INLINE
: data.a 11 ; INLINE
: data.b 12 ; INLINE
: data.c 13 ; INLINE
: data.c.a 13 ; INLINE
: data.c.b 14 ; INLINE
: data.d 15 ; INLINE
: data.d.a 15 ; INLINE
: data.d.b 16 ; INLINE
TB@ data_ref
VARIABLE pdata_ref
: sizeof(data_ref) 6 ; INLINE
: data_ref.size() 6 ; INLINE
: data_ref.Size() 6 ; INLINE
: data_ref pdata_ref @ ; INLINE
: data_ref.a pdata_ref @ 0 + @ ; INLINE
: data_ref.b pdata_ref @ 1 + @ ; INLINE
: data_ref.c pdata_ref @ 2 +  ; INLINE
: data_ref.c.a pdata_ref @ 2 + @ ; INLINE
: data_ref.c.b pdata_ref @ 3 + @ ; INLINE
: data_ref.d pdata_ref @ 4 +  ; INLINE
: data_ref.d.a pdata_ref @ 4 + @ ; INLINE
: data_ref.d.b pdata_ref @ 5 + @ ; INLINE
TA@ sub_ref
VARIABLE psub_ref
: sizeof(sub_ref) 2 ; INLINE
: sub_ref.size() 2 ; INLINE
: sub_ref.Size() 2 ; INLINE
: sub_ref psub_ref @ ; INLINE
: sub_ref.a psub_ref @ 0 + @ ; INLINE
: sub_ref.b psub_ref @ 1 + @ ; INLINE

MAIN:
data[] pdata_ref !
data.c psub_ref !

123 data.c.a !
sub_ref.a

BEGIN
AGAIN

